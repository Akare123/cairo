//! > Test bad consteval_int! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {}

//! > function_name
foo

//! > module_code
const a: felt252 = consteval_int!(func_call(24));

const b: felt252 = consteval_int!('some string');

const c: felt252 = consteval_int!(*24);

const d: felt252 = consteval_int!(~24);

const e: felt252 = consteval_int!(234 < 5);

const e: felt252 = consteval_int![4 + 5];

const f: felt252 = consteval_int!{4 + 5};

const out_of_range: u8 = consteval_int!(120 + 160);

//! > expected_diagnostics
error: The name `e` is defined multiple times.
 --> lib.cairo:11:7
const e: felt252 = consteval_int![4 + 5];
      ^

error: Plugin diagnostic: Unsupported expression in consteval_int macro
 --> lib.cairo:1:20
const a: felt252 = consteval_int!(func_call(24));
                   ^***************************^

error: Inline macro `consteval_int` failed.
 --> lib.cairo:1:20
const a: felt252 = consteval_int!(func_call(24));
                   ^***************************^

error: Only literal constants are currently supported.
 --> lib.cairo:1:20
const a: felt252 = consteval_int!(func_call(24));
                   ^***************************^

error: Plugin diagnostic: Unsupported expression in consteval_int macro
 --> lib.cairo:3:20
const b: felt252 = consteval_int!('some string');
                   ^***************************^

error: Inline macro `consteval_int` failed.
 --> lib.cairo:3:20
const b: felt252 = consteval_int!('some string');
                   ^***************************^

error: Only literal constants are currently supported.
 --> lib.cairo:3:20
const b: felt252 = consteval_int!('some string');
                   ^***************************^

error: Plugin diagnostic: Unsupported unary operator in consteval_int macro
 --> lib.cairo:5:20
const c: felt252 = consteval_int!(*24);
                   ^*****************^

error: Inline macro `consteval_int` failed.
 --> lib.cairo:5:20
const c: felt252 = consteval_int!(*24);
                   ^*****************^

error: Only literal constants are currently supported.
 --> lib.cairo:5:20
const c: felt252 = consteval_int!(*24);
                   ^*****************^

error: Plugin diagnostic: Unsupported unary operator in consteval_int macro
 --> lib.cairo:7:20
const d: felt252 = consteval_int!(~24);
                   ^*****************^

error: Inline macro `consteval_int` failed.
 --> lib.cairo:7:20
const d: felt252 = consteval_int!(~24);
                   ^*****************^

error: Only literal constants are currently supported.
 --> lib.cairo:7:20
const d: felt252 = consteval_int!(~24);
                   ^*****************^

error: Plugin diagnostic: Unsupported binary operator in consteval_int macro
 --> lib.cairo:9:20
const e: felt252 = consteval_int!(234 < 5);
                   ^*********************^

error: Inline macro `consteval_int` failed.
 --> lib.cairo:9:20
const e: felt252 = consteval_int!(234 < 5);
                   ^*********************^

error: Only literal constants are currently supported.
 --> lib.cairo:9:20
const e: felt252 = consteval_int!(234 < 5);
                   ^*********************^

error: Plugin diagnostic: Macro `consteval_int` does not support this bracket type.
 --> lib.cairo:11:20
const e: felt252 = consteval_int![4 + 5];
                   ^*******************^

error: Inline macro `consteval_int` failed.
 --> lib.cairo:11:20
const e: felt252 = consteval_int![4 + 5];
                   ^*******************^

error: Only literal constants are currently supported.
 --> lib.cairo:11:20
const e: felt252 = consteval_int![4 + 5];
                   ^*******************^

error: Plugin diagnostic: Macro `consteval_int` does not support this bracket type.
 --> lib.cairo:13:20
const f: felt252 = consteval_int!{4 + 5};
                   ^*******************^

error: Inline macro `consteval_int` failed.
 --> lib.cairo:13:20
const f: felt252 = consteval_int!{4 + 5};
                   ^*******************^

error: Only literal constants are currently supported.
 --> lib.cairo:13:20
const f: felt252 = consteval_int!{4 + 5};
                   ^*******************^

error: The value does not fit within the range of type core::integer::u8.
 --> lib.cairo:15:26
const out_of_range: u8 = consteval_int!(120 + 160);
                         ^***********************^

//! > ==========================================================================

//! > Test bad array! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
    let x = array!(0);
    let x = array![0_felt252, 1_u8];
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `array` does not support this bracket type.
 --> lib.cairo:2:13
    let x = array!(0);
            ^*******^

error: Inline macro `array` failed.
 --> lib.cairo:2:13
    let x = array!(0);
            ^*******^

error: Plugin diagnostic: Unexpected argument type. Expected: "core::felt252", found: "core::integer::u8".
 --> lib.cairo:3:31
    let x = array![0_felt252, 1_u8];
                              ^**^

//! > ==========================================================================

//! > Test bad format! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let ba: ByteArray = "hello";

   // Bad brackets.
   format!["{}", ba];

   // Less than 2 arguments.
   format!(ba);

   // More than 2 arguments.
   format!("{}", ba, 1);

   // First argument is not "{}".
   format!("{}{}", ba);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `format` does not support this bracket type.
 --> lib.cairo:5:4
   format!["{}", ba];
   ^***************^

error: Inline macro `format` failed.
 --> lib.cairo:5:4
   format!["{}", ba];
   ^***************^

error: Plugin diagnostic: Macro `format` must have exactly 2 unnamed arguments.
 --> lib.cairo:8:4
   format!(ba);
   ^*********^

error: Inline macro `format` failed.
 --> lib.cairo:8:4
   format!(ba);
   ^*********^

error: Plugin diagnostic: Macro `format` must have exactly 2 unnamed arguments.
 --> lib.cairo:11:4
   format!("{}", ba, 1);
   ^******************^

error: Inline macro `format` failed.
 --> lib.cairo:11:4
   format!("{}", ba, 1);
   ^******************^

error: Plugin diagnostic: Currently `format` macro only supports `"{}"` as the first argument (format string).
 --> lib.cairo:14:4
   format!("{}{}", ba);
   ^*****************^

error: Inline macro `format` failed.
 --> lib.cairo:14:4
   format!("{}{}", ba);
   ^*****************^

//! > ==========================================================================

//! > Test bad print! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let ba: ByteArray = "hello";

   // Bad brackets.
   print!["{}", ba];

   // Less than 2 arguments.
   print!(ba);

   // More than 2 arguments.
   print!("{}", ba, 1);

   // First argument is not "{}".
   print!("{}{}", ba);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `print` does not support this bracket type.
 --> lib.cairo:5:4
   print!["{}", ba];
   ^**************^

error: Inline macro `print` failed.
 --> lib.cairo:5:4
   print!["{}", ba];
   ^**************^

error: Plugin diagnostic: Macro `print` must have exactly 2 unnamed arguments.
 --> lib.cairo:8:4
   print!(ba);
   ^********^

error: Inline macro `print` failed.
 --> lib.cairo:8:4
   print!(ba);
   ^********^

error: Plugin diagnostic: Macro `print` must have exactly 2 unnamed arguments.
 --> lib.cairo:11:4
   print!("{}", ba, 1);
   ^*****************^

error: Inline macro `print` failed.
 --> lib.cairo:11:4
   print!("{}", ba, 1);
   ^*****************^

error: Plugin diagnostic: Currently, the `print` macro only supports `"{}"` as the first argument (format string).
 --> lib.cairo:14:4
   print!("{}{}", ba);
   ^****************^

error: Inline macro `print` failed.
 --> lib.cairo:14:4
   print!("{}{}", ba);
   ^****************^

//! > ==========================================================================

//! > Test bad panic! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let ba: ByteArray = "panic data";

   // Bad brackets.
   panic!["{}", ba];

   // Single argument which is not a ByteArray.
   panic!(ba);

   // More than 2 arguments.
   panic!("{}", ba, 1);

   // 2 arguments but first argument is not "{}".
   panic!("{}{}", ba);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `panic` does not support this bracket type.
 --> lib.cairo:5:4
   panic!["{}", ba];
   ^**************^

error: Inline macro `panic` failed.
 --> lib.cairo:5:4
   panic!["{}", ba];
   ^**************^

error: Plugin diagnostic: `panic` macro must have up to 2 unnamed arguments.
 --> lib.cairo:11:4
   panic!("{}", ba, 1);
   ^*****************^

error: Inline macro `panic` failed.
 --> lib.cairo:11:4
   panic!("{}", ba, 1);
   ^*****************^

error: Plugin diagnostic: Currently `format` macro only supports `"{}"` as the first argument (format string).
 --> lib.cairo[print_macro]:2:56
                        panics::panic_with_byte_array(@format!("{}{}", ba));
                                                       ^*****************^

error: Inline macro `format` failed.
 --> lib.cairo[print_macro]:2:56
                        panics::panic_with_byte_array(@format!("{}{}", ba));
                                                       ^*****************^

//! > ==========================================================================

//! > Test bad assert! macros

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let ba: ByteArray = "panic data";

   // Bad brackets.
   assert![1 == 1, "{}", ba];

   // No arguments.
   assert!();

   // First argument is not an expression.
   assert!("{}", ba, 1);

   // Rest of the arguments don't fit into format!/panic!.
   // No format string.
   assert!(1 == 1, ba);
   // Too many arguments.
   assert!(1 == 1, "{}", ba, 1);
   // Format string is not "{}".
   assert!(1 == 1, "{}{}", ba);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Plugin diagnostic: Macro `assert` does not support this bracket type.
 --> lib.cairo:5:4
   assert![1 == 1, "{}", ba];
   ^***********************^

error: Inline macro `assert` failed.
 --> lib.cairo:5:4
   assert![1 == 1, "{}", ba];
   ^***********************^

error: Plugin diagnostic: `assert` macro must have at least one unnamed argument (condition).
 --> lib.cairo:8:4
   assert!();
   ^*******^

error: Inline macro `assert` failed.
 --> lib.cairo:8:4
   assert!();
   ^*******^

error: Plugin diagnostic: Currently `format` macro only supports `"{}"` as the first argument (format string).
 --> lib.cairo[print_macro][print_macro]:2:56
                        panics::panic_with_byte_array(@format!(ba, 1));
                                                       ^************^

error: Inline macro `format` failed.
 --> lib.cairo[print_macro][print_macro]:2:56
                        panics::panic_with_byte_array(@format!(ba, 1));
                                                       ^************^

error: Plugin diagnostic: `panic` macro must have up to 2 unnamed arguments.
 --> lib.cairo[print_macro]:3:29
                            panic!("{}", ba, 1);
                            ^*****************^

error: Inline macro `panic` failed.
 --> lib.cairo[print_macro]:3:29
                            panic!("{}", ba, 1);
                            ^*****************^

error: Plugin diagnostic: Currently `format` macro only supports `"{}"` as the first argument (format string).
 --> lib.cairo[print_macro][print_macro]:2:56
                        panics::panic_with_byte_array(@format!("{}{}", ba));
                                                       ^*****************^

error: Inline macro `format` failed.
 --> lib.cairo[print_macro][print_macro]:2:56
                        panics::panic_with_byte_array(@format!("{}{}", ba));
                                                       ^*****************^

error: Plugin diagnostic: Mismatched types. The type core::bool cannot be created from a string literal.
 --> lib.cairo:11:12
   assert!("{}", ba, 1);
           ^**^

//! > ==========================================================================

//! > Test unknown macro

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: true)

//! > function
fn foo() {
   let x = foo!(0);
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
error: Inline macro `foo` not found.
 --> lib.cairo:2:12
   let x = foo!(0);
           ^*****^

//! > ==========================================================================

//! > Test comment affects macro name

//! > test_runner_name
test_function_diagnostics(expect_diagnostics: false)

//! > function
fn foo() {
   // This comment should not appear in the macro name
   array![0_felt252];
}

//! > function_name
foo

//! > module_code

//! > expected_diagnostics
